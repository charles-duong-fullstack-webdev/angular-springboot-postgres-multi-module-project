package com.db.h2.console.login.domain.assertj;

import com.db.h2.console.domain.BaseEntity;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link BaseEntity} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractBaseEntityAssert<S extends AbstractBaseEntityAssert<S, A>, A extends BaseEntity> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractBaseEntityAssert}</code> to make assertions on actual BaseEntity.
     *
     * @param actual the BaseEntity we want to make assertions on.
     */
    protected AbstractBaseEntityAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual BaseEntity's eingabeTimestamp is equal to the given one.
     *
     * @param eingabeTimestamp the given eingabeTimestamp to compare the actual BaseEntity's eingabeTimestamp to.
     * @return this assertion object.
     * @throws AssertionError - if the actual BaseEntity's eingabeTimestamp is not equal to the given one.
     */
    public S hasEingabeTimestamp(java.time.LocalDateTime eingabeTimestamp) {
        // check that actual BaseEntity we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting eingabeTimestamp of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        java.time.LocalDateTime actualEingabeTimestamp = actual.getCreatedDate();
        if (!Objects.areEqual(actualEingabeTimestamp, eingabeTimestamp)) {
            failWithMessage(assertjErrorMessage, actual, eingabeTimestamp, actualEingabeTimestamp);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual BaseEntity's eingabeUser is equal to the given one.
     *
     * @param eingabeUser the given eingabeUser to compare the actual BaseEntity's eingabeUser to.
     * @return this assertion object.
     * @throws AssertionError - if the actual BaseEntity's eingabeUser is not equal to the given one.
     */
    public S hasEingabeUser(String eingabeUser) {
        // check that actual BaseEntity we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting eingabeUser of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualEingabeUser = actual.getCreatedBy();
        if (!Objects.areEqual(actualEingabeUser, eingabeUser)) {
            failWithMessage(assertjErrorMessage, actual, eingabeUser, actualEingabeUser);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual BaseEntity's mutationTimestamp is equal to the given one.
     *
     * @param mutationTimestamp the given mutationTimestamp to compare the actual BaseEntity's mutationTimestamp to.
     * @return this assertion object.
     * @throws AssertionError - if the actual BaseEntity's mutationTimestamp is not equal to the given one.
     */
    public S hasMutationTimestamp(java.time.LocalDateTime mutationTimestamp) {
        // check that actual BaseEntity we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting mutationTimestamp of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        java.time.LocalDateTime actualMutationTimestamp = actual.getModifiedDate();
        if (!Objects.areEqual(actualMutationTimestamp, mutationTimestamp)) {
            failWithMessage(assertjErrorMessage, actual, mutationTimestamp, actualMutationTimestamp);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual BaseEntity's mutationUser is equal to the given one.
     *
     * @param mutationUser the given mutationUser to compare the actual BaseEntity's mutationUser to.
     * @return this assertion object.
     * @throws AssertionError - if the actual BaseEntity's mutationUser is not equal to the given one.
     */
    public S hasMutationUser(String mutationUser) {
        // check that actual BaseEntity we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting mutationUser of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualMutationUser = actual.getModifiedBy();
        if (!Objects.areEqual(actualMutationUser, mutationUser)) {
            failWithMessage(assertjErrorMessage, actual, mutationUser, actualMutationUser);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
